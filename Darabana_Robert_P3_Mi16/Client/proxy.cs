//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBaseLibrary
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary", IsReference=true)]
    public partial class File : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DataBaseLibrary.DynamicPropriety[] DynamicProprietiesField;
        
        private string FullPathField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private bool IsPhotoField;
        
        private DataBaseLibrary.Propriety ProprietyField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DataBaseLibrary.DynamicPropriety[] DynamicProprieties
        {
            get
            {
                return this.DynamicProprietiesField;
            }
            set
            {
                this.DynamicProprietiesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath
        {
            get
            {
                return this.FullPathField;
            }
            set
            {
                this.FullPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted
        {
            get
            {
                return this.IsDeletedField;
            }
            set
            {
                this.IsDeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPhoto
        {
            get
            {
                return this.IsPhotoField;
            }
            set
            {
                this.IsPhotoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DataBaseLibrary.Propriety Propriety
        {
            get
            {
                return this.ProprietyField;
            }
            set
            {
                this.ProprietyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Propriety", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary", IsReference=true)]
    public partial class Propriety : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DataCreatedField;
        
        private string EventField;
        
        private DataBaseLibrary.File FileField;
        
        private int IdField;
        
        private string LandscapesField;
        
        private string PeopleField;
        
        private string PhotoplaceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DataCreated
        {
            get
            {
                return this.DataCreatedField;
            }
            set
            {
                this.DataCreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DataBaseLibrary.File File
        {
            get
            {
                return this.FileField;
            }
            set
            {
                this.FileField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Landscapes
        {
            get
            {
                return this.LandscapesField;
            }
            set
            {
                this.LandscapesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string People
        {
            get
            {
                return this.PeopleField;
            }
            set
            {
                this.PeopleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Photoplace
        {
            get
            {
                return this.PhotoplaceField;
            }
            set
            {
                this.PhotoplaceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicPropriety", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary", IsReference=true)]
    public partial class DynamicPropriety : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private DataBaseLibrary.File[] FilesField;
        
        private int IdField;
        
        private string ProprietyNameField;
        
        private string ProprietyValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DataBaseLibrary.File[] Files
        {
            get
            {
                return this.FilesField;
            }
            set
            {
                this.FilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProprietyName
        {
            get
            {
                return this.ProprietyNameField;
            }
            set
            {
                this.ProprietyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProprietyValue
        {
            get
            {
                return this.ProprietyValueField;
            }
            set
            {
                this.ProprietyValueField = value;
            }
        }
    }
}
namespace DataBaseLibrary.DTOs
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileDTO", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary.DTOs", IsReference=true)]
    public partial class FileDTO : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FullPathField;
        
        private int IdField;
        
        private string TypeField;
        private string photo;

        public FileDTO(int id, string fullPath, string photo)
        {
            Id = id;
            FullPath = fullPath;
            this.photo = photo;
        }

        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath
        {
            get
            {
                return this.FullPathField;
            }
            set
            {
                this.FullPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="InterfaceService")]
public interface InterfaceService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/PrintFiles", ReplyAction="http://tempuri.org/InterfaceFileService/PrintFilesResponse")]
    void PrintFiles(DataBaseLibrary.File[] listFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/PrintFiles", ReplyAction="http://tempuri.org/InterfaceFileService/PrintFilesResponse")]
    System.Threading.Tasks.Task PrintFilesAsync(DataBaseLibrary.File[] listFile);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetPhotos", ReplyAction="http://tempuri.org/InterfaceFileService/GetPhotosResponse")]
    DataBaseLibrary.File[] GetPhotos();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetPhotos", ReplyAction="http://tempuri.org/InterfaceFileService/GetPhotosResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> GetPhotosAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetVideos", ReplyAction="http://tempuri.org/InterfaceFileService/GetVideosResponse")]
    DataBaseLibrary.File[] GetVideos();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetVideos", ReplyAction="http://tempuri.org/InterfaceFileService/GetVideosResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> GetVideosAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetFiles", ReplyAction="http://tempuri.org/InterfaceFileService/GetFilesResponse")]
    DataBaseLibrary.DTOs.FileDTO[] GetFiles();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetFiles", ReplyAction="http://tempuri.org/InterfaceFileService/GetFilesResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.DTOs.FileDTO[]> GetFilesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetMaxId", ReplyAction="http://tempuri.org/InterfaceFileService/GetMaxIdResponse")]
    int GetMaxId();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetMaxId", ReplyAction="http://tempuri.org/InterfaceFileService/GetMaxIdResponse")]
    System.Threading.Tasks.Task<int> GetMaxIdAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/AddFile", ReplyAction="http://tempuri.org/InterfaceFileService/AddFileResponse")]
    string AddFile(string fullPath, string dataCreated, string eve, string people, string landscapes, string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/AddFile", ReplyAction="http://tempuri.org/InterfaceFileService/AddFileResponse")]
    System.Threading.Tasks.Task<string> AddFileAsync(string fullPath, string dataCreated, string eve, string people, string landscapes, string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/AddFilesFromDirectory", ReplyAction="http://tempuri.org/InterfaceFileService/AddFilesFromDirectoryResponse")]
    string[] AddFilesFromDirectory(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/AddFilesFromDirectory", ReplyAction="http://tempuri.org/InterfaceFileService/AddFilesFromDirectoryResponse")]
    System.Threading.Tasks.Task<string[]> AddFilesFromDirectoryAsync(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/PhotoOrImage", ReplyAction="http://tempuri.org/InterfaceFileService/PhotoOrImageResponse")]
    bool PhotoOrImage(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/PhotoOrImage", ReplyAction="http://tempuri.org/InterfaceFileService/PhotoOrImageResponse")]
    System.Threading.Tasks.Task<bool> PhotoOrImageAsync(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/DeleteFile", ReplyAction="http://tempuri.org/InterfaceFileService/DeleteFileResponse")]
    string DeleteFile(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/DeleteFile", ReplyAction="http://tempuri.org/InterfaceFileService/DeleteFileResponse")]
    System.Threading.Tasks.Task<string> DeleteFileAsync(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/returnPropriety", ReplyAction="http://tempuri.org/InterfaceProprietyService/returnProprietyResponse")]
    DataBaseLibrary.Propriety returnPropriety(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/returnPropriety", ReplyAction="http://tempuri.org/InterfaceProprietyService/returnProprietyResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.Propriety> returnProprietyAsync(string fullPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/returnDateTime", ReplyAction="http://tempuri.org/InterfaceProprietyService/returnDateTimeResponse")]
    System.DateTime returnDateTime(string date);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/returnDateTime", ReplyAction="http://tempuri.org/InterfaceProprietyService/returnDateTimeResponse")]
    System.Threading.Tasks.Task<System.DateTime> returnDateTimeAsync(string date);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateDateTime", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateDateTimeResponse")]
    void updateDateTime(string fullPath, string date);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateDateTime", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateDateTimeResponse")]
    System.Threading.Tasks.Task updateDateTimeAsync(string fullPath, string date);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateEvent", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateEventResponse")]
    void updateEvent(string fullPath, string eve);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateEvent", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateEventResponse")]
    System.Threading.Tasks.Task updateEventAsync(string fullPath, string eve);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updatePeople", ReplyAction="http://tempuri.org/InterfaceProprietyService/updatePeopleResponse")]
    void updatePeople(string fullPath, string people);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updatePeople", ReplyAction="http://tempuri.org/InterfaceProprietyService/updatePeopleResponse")]
    System.Threading.Tasks.Task updatePeopleAsync(string fullPath, string people);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateLandscapes", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateLandscapesResponse")]
    void updateLandscapes(string fullPath, string landscapes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateLandscapes", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateLandscapesResponse")]
    System.Threading.Tasks.Task updateLandscapesAsync(string fullPath, string landscapes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updatePhotoPlace", ReplyAction="http://tempuri.org/InterfaceProprietyService/updatePhotoPlaceResponse")]
    void updatePhotoPlace(string fullPath, string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updatePhotoPlace", ReplyAction="http://tempuri.org/InterfaceProprietyService/updatePhotoPlaceResponse")]
    System.Threading.Tasks.Task updatePhotoPlaceAsync(string fullPath, string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateAll", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateAllResponse")]
    void updateAll(string fullPath, string date, string eve, string people, string landscapes, string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateAll", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateAllResponse")]
    System.Threading.Tasks.Task updateAllAsync(string fullPath, string date, string eve, string people, string landscapes, string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDate", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDateResponse")]
    DataBaseLibrary.File[] searchByDate(string date);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDate", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDateResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByDateAsync(string date);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByEvent", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByEventResponse")]
    DataBaseLibrary.File[] searchByEvent(string eve);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByEvent", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByEventResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByEventAsync(string eve);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByPeople", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByPeopleResponse")]
    DataBaseLibrary.File[] searchByPeople(string people);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByPeople", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByPeopleResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByPeopleAsync(string people);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByLandscapes", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByLandscapesResponse")]
    DataBaseLibrary.File[] searchByLandscapes(string landscapes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByLandscapes", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByLandscapesResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByLandscapesAsync(string landscapes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByPhotoPlace", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByPhotoPlaceResponse")]
    DataBaseLibrary.File[] searchByPhotoPlace(string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByPhotoPlace", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByPhotoPlaceResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByPhotoPlaceAsync(string photoPlace);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDynamicProp", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDynamicPropResponse")]
    DataBaseLibrary.File[] searchByDynamicProp(string propName, string propValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDynamicProp", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDynamicPropResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByDynamicPropAsync(string propName, string propValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDynamicPropName", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDynamicPropNameResponse")]
    DataBaseLibrary.File[] searchByDynamicPropName(string propName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDynamicPropName", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDynamicPropNameResponse")]
    System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByDynamicPropNameAsync(string propName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/GetMaxId2", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/GetMaxId2Response")]
    int GetMaxId2();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/GetMaxId2", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/GetMaxId2Response")]
    System.Threading.Tasks.Task<int> GetMaxId2Async();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/AddDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/AddDynamicPropResponse")]
    void AddDynamicProp(string fullPath, string proprietyName, string proprietyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/AddDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/AddDynamicPropResponse")]
    System.Threading.Tasks.Task AddDynamicPropAsync(string fullPath, string proprietyName, string proprietyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/DeleteDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/DeleteDynamicPropResponse")]
    void DeleteDynamicProp(string fullPath, string propName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/DeleteDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/DeleteDynamicPropResponse")]
    System.Threading.Tasks.Task DeleteDynamicPropAsync(string fullPath, string propName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/UpdateDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/UpdateDynamicPropResponse")]
    void UpdateDynamicProp(string fullPath, string propName, string oldPropValue, string newPropValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/UpdateDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/UpdateDynamicPropResponse")]
    System.Threading.Tasks.Task UpdateDynamicPropAsync(string fullPath, string propName, string oldPropValue, string newPropValue);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface InterfaceServiceChannel : InterfaceService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class InterfaceServiceClient : System.ServiceModel.ClientBase<InterfaceService>, InterfaceService
{
    
    public InterfaceServiceClient()
    {
    }
    
    public InterfaceServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public InterfaceServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public InterfaceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public InterfaceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void PrintFiles(DataBaseLibrary.File[] listFile)
    {
        base.Channel.PrintFiles(listFile);
    }
    
    public System.Threading.Tasks.Task PrintFilesAsync(DataBaseLibrary.File[] listFile)
    {
        return base.Channel.PrintFilesAsync(listFile);
    }
    
    public DataBaseLibrary.File[] GetPhotos()
    {
        return base.Channel.GetPhotos();
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> GetPhotosAsync()
    {
        return base.Channel.GetPhotosAsync();
    }
    
    public DataBaseLibrary.File[] GetVideos()
    {
        return base.Channel.GetVideos();
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> GetVideosAsync()
    {
        return base.Channel.GetVideosAsync();
    }
    
    public DataBaseLibrary.DTOs.FileDTO[] GetFiles()
    {
        return base.Channel.GetFiles();
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.DTOs.FileDTO[]> GetFilesAsync()
    {
        return base.Channel.GetFilesAsync();
    }
    
    public int GetMaxId()
    {
        return base.Channel.GetMaxId();
    }
    
    public System.Threading.Tasks.Task<int> GetMaxIdAsync()
    {
        return base.Channel.GetMaxIdAsync();
    }
    
    public string AddFile(string fullPath, string dataCreated, string eve, string people, string landscapes, string photoPlace)
    {
        return base.Channel.AddFile(fullPath, dataCreated, eve, people, landscapes, photoPlace);
    }
    
    public System.Threading.Tasks.Task<string> AddFileAsync(string fullPath, string dataCreated, string eve, string people, string landscapes, string photoPlace)
    {
        return base.Channel.AddFileAsync(fullPath, dataCreated, eve, people, landscapes, photoPlace);
    }
    
    public string[] AddFilesFromDirectory(string fullPath)
    {
        return base.Channel.AddFilesFromDirectory(fullPath);
    }
    
    public System.Threading.Tasks.Task<string[]> AddFilesFromDirectoryAsync(string fullPath)
    {
        return base.Channel.AddFilesFromDirectoryAsync(fullPath);
    }
    
    public bool PhotoOrImage(string fullPath)
    {
        return base.Channel.PhotoOrImage(fullPath);
    }
    
    public System.Threading.Tasks.Task<bool> PhotoOrImageAsync(string fullPath)
    {
        return base.Channel.PhotoOrImageAsync(fullPath);
    }
    
    public string DeleteFile(string fullPath)
    {
        return base.Channel.DeleteFile(fullPath);
    }
    
    public System.Threading.Tasks.Task<string> DeleteFileAsync(string fullPath)
    {
        return base.Channel.DeleteFileAsync(fullPath);
    }
    
    public DataBaseLibrary.Propriety returnPropriety(string fullPath)
    {
        return base.Channel.returnPropriety(fullPath);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.Propriety> returnProprietyAsync(string fullPath)
    {
        return base.Channel.returnProprietyAsync(fullPath);
    }
    
    public System.DateTime returnDateTime(string date)
    {
        return base.Channel.returnDateTime(date);
    }
    
    public System.Threading.Tasks.Task<System.DateTime> returnDateTimeAsync(string date)
    {
        return base.Channel.returnDateTimeAsync(date);
    }
    
    public void updateDateTime(string fullPath, string date)
    {
        base.Channel.updateDateTime(fullPath, date);
    }
    
    public System.Threading.Tasks.Task updateDateTimeAsync(string fullPath, string date)
    {
        return base.Channel.updateDateTimeAsync(fullPath, date);
    }
    
    public void updateEvent(string fullPath, string eve)
    {
        base.Channel.updateEvent(fullPath, eve);
    }
    
    public System.Threading.Tasks.Task updateEventAsync(string fullPath, string eve)
    {
        return base.Channel.updateEventAsync(fullPath, eve);
    }
    
    public void updatePeople(string fullPath, string people)
    {
        base.Channel.updatePeople(fullPath, people);
    }
    
    public System.Threading.Tasks.Task updatePeopleAsync(string fullPath, string people)
    {
        return base.Channel.updatePeopleAsync(fullPath, people);
    }
    
    public void updateLandscapes(string fullPath, string landscapes)
    {
        base.Channel.updateLandscapes(fullPath, landscapes);
    }
    
    public System.Threading.Tasks.Task updateLandscapesAsync(string fullPath, string landscapes)
    {
        return base.Channel.updateLandscapesAsync(fullPath, landscapes);
    }
    
    public void updatePhotoPlace(string fullPath, string photoPlace)
    {
        base.Channel.updatePhotoPlace(fullPath, photoPlace);
    }
    
    public System.Threading.Tasks.Task updatePhotoPlaceAsync(string fullPath, string photoPlace)
    {
        return base.Channel.updatePhotoPlaceAsync(fullPath, photoPlace);
    }
    
    public void updateAll(string fullPath, string date, string eve, string people, string landscapes, string photoPlace)
    {
        base.Channel.updateAll(fullPath, date, eve, people, landscapes, photoPlace);
    }
    
    public System.Threading.Tasks.Task updateAllAsync(string fullPath, string date, string eve, string people, string landscapes, string photoPlace)
    {
        return base.Channel.updateAllAsync(fullPath, date, eve, people, landscapes, photoPlace);
    }
    
    public DataBaseLibrary.File[] searchByDate(string date)
    {
        return base.Channel.searchByDate(date);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByDateAsync(string date)
    {
        return base.Channel.searchByDateAsync(date);
    }
    
    public DataBaseLibrary.File[] searchByEvent(string eve)
    {
        return base.Channel.searchByEvent(eve);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByEventAsync(string eve)
    {
        return base.Channel.searchByEventAsync(eve);
    }
    
    public DataBaseLibrary.File[] searchByPeople(string people)
    {
        return base.Channel.searchByPeople(people);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByPeopleAsync(string people)
    {
        return base.Channel.searchByPeopleAsync(people);
    }
    
    public DataBaseLibrary.File[] searchByLandscapes(string landscapes)
    {
        return base.Channel.searchByLandscapes(landscapes);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByLandscapesAsync(string landscapes)
    {
        return base.Channel.searchByLandscapesAsync(landscapes);
    }
    
    public DataBaseLibrary.File[] searchByPhotoPlace(string photoPlace)
    {
        return base.Channel.searchByPhotoPlace(photoPlace);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByPhotoPlaceAsync(string photoPlace)
    {
        return base.Channel.searchByPhotoPlaceAsync(photoPlace);
    }
    
    public DataBaseLibrary.File[] searchByDynamicProp(string propName, string propValue)
    {
        return base.Channel.searchByDynamicProp(propName, propValue);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByDynamicPropAsync(string propName, string propValue)
    {
        return base.Channel.searchByDynamicPropAsync(propName, propValue);
    }
    
    public DataBaseLibrary.File[] searchByDynamicPropName(string propName)
    {
        return base.Channel.searchByDynamicPropName(propName);
    }
    
    public System.Threading.Tasks.Task<DataBaseLibrary.File[]> searchByDynamicPropNameAsync(string propName)
    {
        return base.Channel.searchByDynamicPropNameAsync(propName);
    }
    
    public int GetMaxId2()
    {
        return base.Channel.GetMaxId2();
    }
    
    public System.Threading.Tasks.Task<int> GetMaxId2Async()
    {
        return base.Channel.GetMaxId2Async();
    }
    
    public void AddDynamicProp(string fullPath, string proprietyName, string proprietyValue)
    {
        base.Channel.AddDynamicProp(fullPath, proprietyName, proprietyValue);
    }
    
    public System.Threading.Tasks.Task AddDynamicPropAsync(string fullPath, string proprietyName, string proprietyValue)
    {
        return base.Channel.AddDynamicPropAsync(fullPath, proprietyName, proprietyValue);
    }
    
    public void DeleteDynamicProp(string fullPath, string propName)
    {
        base.Channel.DeleteDynamicProp(fullPath, propName);
    }
    
    public System.Threading.Tasks.Task DeleteDynamicPropAsync(string fullPath, string propName)
    {
        return base.Channel.DeleteDynamicPropAsync(fullPath, propName);
    }
    
    public void UpdateDynamicProp(string fullPath, string propName, string oldPropValue, string newPropValue)
    {
        base.Channel.UpdateDynamicProp(fullPath, propName, oldPropValue, newPropValue);
    }
    
    public System.Threading.Tasks.Task UpdateDynamicPropAsync(string fullPath, string propName, string oldPropValue, string newPropValue)
    {
        return base.Channel.UpdateDynamicPropAsync(fullPath, propName, oldPropValue, newPropValue);
    }
}
