//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferencePhotos
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary", IsReference=true)]
    public partial class File : object
    {
        
        private System.Collections.Generic.List<ServiceReferencePhotos.DynamicPropriety> DynamicProprietiesField;
        
        private string FullPathField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private bool IsPhotoField;
        
        private ServiceReferencePhotos.Propriety ProprietyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferencePhotos.DynamicPropriety> DynamicProprieties
        {
            get
            {
                return this.DynamicProprietiesField;
            }
            set
            {
                this.DynamicProprietiesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath
        {
            get
            {
                return this.FullPathField;
            }
            set
            {
                this.FullPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted
        {
            get
            {
                return this.IsDeletedField;
            }
            set
            {
                this.IsDeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPhoto
        {
            get
            {
                return this.IsPhotoField;
            }
            set
            {
                this.IsPhotoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferencePhotos.Propriety Propriety
        {
            get
            {
                return this.ProprietyField;
            }
            set
            {
                this.ProprietyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Propriety", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary", IsReference=true)]
    public partial class Propriety : object
    {
        
        private System.DateTime DataCreatedField;
        
        private string EventField;
        
        private ServiceReferencePhotos.File FileField;
        
        private int IdField;
        
        private string LandscapesField;
        
        private string PeopleField;
        
        private string PhotoplaceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DataCreated
        {
            get
            {
                return this.DataCreatedField;
            }
            set
            {
                this.DataCreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferencePhotos.File File
        {
            get
            {
                return this.FileField;
            }
            set
            {
                this.FileField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Landscapes
        {
            get
            {
                return this.LandscapesField;
            }
            set
            {
                this.LandscapesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string People
        {
            get
            {
                return this.PeopleField;
            }
            set
            {
                this.PeopleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Photoplace
        {
            get
            {
                return this.PhotoplaceField;
            }
            set
            {
                this.PhotoplaceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicPropriety", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary", IsReference=true)]
    public partial class DynamicPropriety : object
    {
        
        private System.Collections.Generic.List<ServiceReferencePhotos.File> FilesField;
        
        private int IdField;
        
        private string ProprietyNameField;
        
        private string ProprietyValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferencePhotos.File> Files
        {
            get
            {
                return this.FilesField;
            }
            set
            {
                this.FilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProprietyName
        {
            get
            {
                return this.ProprietyNameField;
            }
            set
            {
                this.ProprietyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProprietyValue
        {
            get
            {
                return this.ProprietyValueField;
            }
            set
            {
                this.ProprietyValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileDTO", Namespace="http://schemas.datacontract.org/2004/07/DataBaseLibrary.DTOs", IsReference=true)]
    public partial class FileDTO : object
    {
        
        private string FullPathField;
        
        private int IdField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath
        {
            get
            {
                return this.FullPathField;
            }
            set
            {
                this.FullPathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePhotos.InterfaceService")]
    public interface InterfaceService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/PrintFiles", ReplyAction="http://tempuri.org/InterfaceFileService/PrintFilesResponse")]
        System.Threading.Tasks.Task PrintFilesAsync(System.Collections.Generic.List<ServiceReferencePhotos.File> listFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetPhotos", ReplyAction="http://tempuri.org/InterfaceFileService/GetPhotosResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> GetPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetVideos", ReplyAction="http://tempuri.org/InterfaceFileService/GetVideosResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> GetVideosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetFiles", ReplyAction="http://tempuri.org/InterfaceFileService/GetFilesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.FileDTO>> GetFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/GetMaxId", ReplyAction="http://tempuri.org/InterfaceFileService/GetMaxIdResponse")]
        System.Threading.Tasks.Task<int> GetMaxIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/AddFile", ReplyAction="http://tempuri.org/InterfaceFileService/AddFileResponse")]
        System.Threading.Tasks.Task<string> AddFileAsync(string fullPath, string dataCreated, string eve, string people, string landscapes, string photoPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/AddFilesFromDirectory", ReplyAction="http://tempuri.org/InterfaceFileService/AddFilesFromDirectoryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AddFilesFromDirectoryAsync(string fullPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/PhotoOrImage", ReplyAction="http://tempuri.org/InterfaceFileService/PhotoOrImageResponse")]
        System.Threading.Tasks.Task<bool> PhotoOrImageAsync(string fullPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFileService/DeleteFile", ReplyAction="http://tempuri.org/InterfaceFileService/DeleteFileResponse")]
        System.Threading.Tasks.Task<string> DeleteFileAsync(string fullPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/returnPropriety", ReplyAction="http://tempuri.org/InterfaceProprietyService/returnProprietyResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Propriety> returnProprietyAsync(string fullPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/returnDateTime", ReplyAction="http://tempuri.org/InterfaceProprietyService/returnDateTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> returnDateTimeAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateDateTime", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateDateTimeResponse")]
        System.Threading.Tasks.Task updateDateTimeAsync(string fullPath, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateEvent", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateEventResponse")]
        System.Threading.Tasks.Task updateEventAsync(string fullPath, string eve);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updatePeople", ReplyAction="http://tempuri.org/InterfaceProprietyService/updatePeopleResponse")]
        System.Threading.Tasks.Task updatePeopleAsync(string fullPath, string people);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateLandscapes", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateLandscapesResponse")]
        System.Threading.Tasks.Task updateLandscapesAsync(string fullPath, string landscapes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updatePhotoPlace", ReplyAction="http://tempuri.org/InterfaceProprietyService/updatePhotoPlaceResponse")]
        System.Threading.Tasks.Task updatePhotoPlaceAsync(string fullPath, string photoPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProprietyService/updateAll", ReplyAction="http://tempuri.org/InterfaceProprietyService/updateAllResponse")]
        System.Threading.Tasks.Task updateAllAsync(string fullPath, string date, string eve, string people, string landscapes, string photoPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDate", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByDateAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByEvent", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByEventResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByEventAsync(string eve);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByPeople", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByPeopleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByPeopleAsync(string people);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByLandscapes", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByLandscapesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByLandscapesAsync(string landscapes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByPhotoPlace", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByPhotoPlaceResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByPhotoPlaceAsync(string photoPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDynamicProp", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDynamicPropResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByDynamicPropAsync(string propName, string propValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSearchService/searchByDynamicPropName", ReplyAction="http://tempuri.org/InterfaceSearchService/searchByDynamicPropNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByDynamicPropNameAsync(string propName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/GetMaxId2", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/GetMaxId2Response")]
        System.Threading.Tasks.Task<int> GetMaxId2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/AddDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/AddDynamicPropResponse")]
        System.Threading.Tasks.Task AddDynamicPropAsync(string fullPath, string proprietyName, string proprietyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/DeleteDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/DeleteDynamicPropResponse")]
        System.Threading.Tasks.Task DeleteDynamicPropAsync(string fullPath, string propName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/UpdateDynamicProp", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/UpdateDynamicPropResponse")]
        System.Threading.Tasks.Task UpdateDynamicPropAsync(string fullPath, string propName, string oldPropValue, string newPropValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/returnDynamicProps", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/returnDynamicPropsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.DynamicPropriety>> returnDynamicPropsAsync(string fullPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceDynamicPropService/allDynamicProps", ReplyAction="http://tempuri.org/InterfaceDynamicPropService/allDynamicPropsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.DynamicPropriety>> allDynamicPropsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface InterfaceServiceChannel : ServiceReferencePhotos.InterfaceService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class InterfaceServiceClient : System.ServiceModel.ClientBase<ServiceReferencePhotos.InterfaceService>, ServiceReferencePhotos.InterfaceService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public InterfaceServiceClient() : 
                base(InterfaceServiceClient.GetDefaultBinding(), InterfaceServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_InterfaceService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(InterfaceServiceClient.GetBindingForEndpoint(endpointConfiguration), InterfaceServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(InterfaceServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(InterfaceServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task PrintFilesAsync(System.Collections.Generic.List<ServiceReferencePhotos.File> listFile)
        {
            return base.Channel.PrintFilesAsync(listFile);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> GetPhotosAsync()
        {
            return base.Channel.GetPhotosAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> GetVideosAsync()
        {
            return base.Channel.GetVideosAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.FileDTO>> GetFilesAsync()
        {
            return base.Channel.GetFilesAsync();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxIdAsync()
        {
            return base.Channel.GetMaxIdAsync();
        }
        
        public System.Threading.Tasks.Task<string> AddFileAsync(string fullPath, string dataCreated, string eve, string people, string landscapes, string photoPlace)
        {
            return base.Channel.AddFileAsync(fullPath, dataCreated, eve, people, landscapes, photoPlace);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AddFilesFromDirectoryAsync(string fullPath)
        {
            return base.Channel.AddFilesFromDirectoryAsync(fullPath);
        }
        
        public System.Threading.Tasks.Task<bool> PhotoOrImageAsync(string fullPath)
        {
            return base.Channel.PhotoOrImageAsync(fullPath);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFileAsync(string fullPath)
        {
            return base.Channel.DeleteFileAsync(fullPath);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Propriety> returnProprietyAsync(string fullPath)
        {
            return base.Channel.returnProprietyAsync(fullPath);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> returnDateTimeAsync(string date)
        {
            return base.Channel.returnDateTimeAsync(date);
        }
        
        public System.Threading.Tasks.Task updateDateTimeAsync(string fullPath, string date)
        {
            return base.Channel.updateDateTimeAsync(fullPath, date);
        }
        
        public System.Threading.Tasks.Task updateEventAsync(string fullPath, string eve)
        {
            return base.Channel.updateEventAsync(fullPath, eve);
        }
        
        public System.Threading.Tasks.Task updatePeopleAsync(string fullPath, string people)
        {
            return base.Channel.updatePeopleAsync(fullPath, people);
        }
        
        public System.Threading.Tasks.Task updateLandscapesAsync(string fullPath, string landscapes)
        {
            return base.Channel.updateLandscapesAsync(fullPath, landscapes);
        }
        
        public System.Threading.Tasks.Task updatePhotoPlaceAsync(string fullPath, string photoPlace)
        {
            return base.Channel.updatePhotoPlaceAsync(fullPath, photoPlace);
        }
        
        public System.Threading.Tasks.Task updateAllAsync(string fullPath, string date, string eve, string people, string landscapes, string photoPlace)
        {
            return base.Channel.updateAllAsync(fullPath, date, eve, people, landscapes, photoPlace);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByDateAsync(string date)
        {
            return base.Channel.searchByDateAsync(date);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByEventAsync(string eve)
        {
            return base.Channel.searchByEventAsync(eve);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByPeopleAsync(string people)
        {
            return base.Channel.searchByPeopleAsync(people);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByLandscapesAsync(string landscapes)
        {
            return base.Channel.searchByLandscapesAsync(landscapes);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByPhotoPlaceAsync(string photoPlace)
        {
            return base.Channel.searchByPhotoPlaceAsync(photoPlace);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByDynamicPropAsync(string propName, string propValue)
        {
            return base.Channel.searchByDynamicPropAsync(propName, propValue);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.File>> searchByDynamicPropNameAsync(string propName)
        {
            return base.Channel.searchByDynamicPropNameAsync(propName);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxId2Async()
        {
            return base.Channel.GetMaxId2Async();
        }
        
        public System.Threading.Tasks.Task AddDynamicPropAsync(string fullPath, string proprietyName, string proprietyValue)
        {
            return base.Channel.AddDynamicPropAsync(fullPath, proprietyName, proprietyValue);
        }
        
        public System.Threading.Tasks.Task DeleteDynamicPropAsync(string fullPath, string propName)
        {
            return base.Channel.DeleteDynamicPropAsync(fullPath, propName);
        }
        
        public System.Threading.Tasks.Task UpdateDynamicPropAsync(string fullPath, string propName, string oldPropValue, string newPropValue)
        {
            return base.Channel.UpdateDynamicPropAsync(fullPath, propName, oldPropValue, newPropValue);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.DynamicPropriety>> returnDynamicPropsAsync(string fullPath)
        {
            return base.Channel.returnDynamicPropsAsync(fullPath);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.DynamicPropriety>> allDynamicPropsAsync()
        {
            return base.Channel.allDynamicPropsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return InterfaceServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_InterfaceService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return InterfaceServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_InterfaceService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_InterfaceService,
        }
    }
}
